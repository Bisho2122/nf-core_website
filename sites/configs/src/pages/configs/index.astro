---
import octokit from "@components/octokit";
import ListingLayout from "@layouts/ListingLayout.astro";
import ConfigListing from "@components/ConfigListing.svelte";
import { getCollection } from "astro:content";

//get contents of markdown files in docs dir in https://github.com/nf-core/configs/tree/master/docs using request
const files = await getCollection("configs");

//filter out directories
// let markdowns = files.data.filter((file) => file.type === "file");
// exclude template file
// markdowns = markdowns.filter((file) => file.name !== "template.md");

//get the markdown file contents
// const configs = await Promise.all(
//     markdowns.map(async (markdown) => {
//         const content = await octokit.request("GET /repos/{owner}/{repo}/contents/{path}", {
//             owner: "nf-core",
//             repo: "configs",
//             path: markdown.path,
//         });
//         const config = await octokit
//             .request("GET /repos/{owner}/{repo}/contents/{path}", {
//                 owner: "nf-core",
//                 repo: "configs",
//                 path: markdown.path.replace("docs/", "conf/").replace(".md", ".config"),
//             })
//             .catch((error) => {
//                 console.log(error);
//                 return {
//                     data: {
//                         content: Buffer.from("No config file found").toString("base64"),
//                     },
//                 };
//             });
//         return {
//             name: markdown.name,
//             content: Buffer.from((content.data as any).content, "base64").toString(),
//             config: parseConfig(Buffer.from((config.data as any).content, "base64").toString()),
//         };
//     }),
// );
console.log(files.map((file) => file.rendered.metadata));
const title = "nf-core/configs";
const description =
    "Browse the " +
    files.filter((file) => file.data.extension === "config").length +
    " configs that are currently available as part of nf-core.";
---

<ListingLayout
    title={title}
    description={description}
    filter={[]}
    sortBy={["Name", "Executor"]}
    displayStyle={[]}
    mainpage_container={true}
>
    <p class="container">
        The following configs are common Nextflow pipeline configurations and options for particular institutional
        clusters or compute environments.
    </p>

    <ConfigListing
        configs={files.filter((file) => file.data.extension === "config")}
        slot="listing-components"
        client:load
    />
</ListingLayout>

<style></style>
